var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/create-flags.tsx
import React from "react";
var MISSING_CONTEXT = Symbol();
var NOOP = () => null;
var isFlagScalar = (value) => {
  return typeof value === "string" || typeof value === "number" || typeof value === "boolean";
};
var createFlags = () => {
  const calleeStr = (keyPath, defaultValue, format) => () => {
    const keyPathStr = JSON.stringify(keyPath);
    const defaultValueStr = JSON.stringify(defaultValue);
    return format == "hook" ? `useFlag(${keyPathStr}, ${defaultValueStr})` : `<Flag keyPath=${keyPathStr} defaultValue=${defaultValueStr} ... />`;
  };
  const Context = React.createContext(MISSING_CONTEXT);
  Context.displayName = "Flag";
  const FlagBackendProvider = ({ backend, children }) => {
    return /* @__PURE__ */ React.createElement(Context.Provider, {
      value: backend
    }, children);
  };
  FlagBackendProvider.displayName = "FlagBackendProvider";
  const internalUseFlag = (keyPath, defaultValue, displayCallee) => {
    const keyPath_ = Array.isArray(keyPath) ? keyPath : keyPath.split(".");
    if (defaultValue === void 0) {
      throw new Error(`Calling \`${displayCallee()}\` requires that you provide a default value that matches the type of the flag.`);
    }
    const expectedType = typeof defaultValue;
    const backend = React.useContext(Context);
    if (backend === MISSING_CONTEXT) {
      if (process.env.NODE_ENV !== "development") {
        return defaultValue;
      }
      throw new Error(`Calling \`${displayCallee()}\` requires that the application is wrapped in a \`<FlagBackendProvider />\``);
    }
    const ext = backend.toExternalStore(keyPath_, defaultValue);
    let result = React.useSyncExternalStore(ext.subscribe, ext.getSnapshot, ext.getServerSnapshot);
    if ((result === void 0 || result === null) && process.env.NODE_ENV === "development") {
      console.warn(`\`${displayCallee()}\` does not return anything from backend "${backend.name}".`);
    }
    result != null ? result : result = defaultValue;
    if (!isFlagScalar(result)) {
      throw new Error(`Calling \`${displayCallee()}\` requires that the result is a boolean, number or string. Instead returned ${JSON.stringify(result)}.`);
    }
    if (typeof result !== expectedType) {
      if (process.env.NODE_ENV === "development") {
        console.warn(`Expected result of \`${displayCallee()}\` to be a ${expectedType} (based on the default value of ${JSON.stringify(defaultValue)}). Instead returned ${JSON.stringify(result)}. Falling back to default value.`);
      }
      return defaultValue;
    }
    return result;
  };
  function Flag({ keyPath, defaultValue, render, fallback }) {
    fallback != null ? fallback : fallback = NOOP;
    const flag = internalUseFlag(keyPath, defaultValue, calleeStr(keyPath, defaultValue, "component"));
    return flag === false ? fallback() : render(flag);
  }
  Flag.displayName = "Flag";
  function useFlag(keyPath, defaultValue) {
    React.useDebugValue(keyPath);
    return internalUseFlag(keyPath, defaultValue, calleeStr(keyPath, defaultValue, "hook"));
  }
  return {
    FlagBackendProvider,
    Flag,
    useFlag
  };
};

// src/backends/abstract-backend.ts
import { createAsyncRef } from "async-ref";
var _listeners, _subscribe;
var AbstractBackend = class {
  constructor() {
    this.notify = () => __privateGet(this, _listeners).forEach((sub) => sub());
    __privateAdd(this, _listeners, /* @__PURE__ */ new Set());
    __privateAdd(this, _subscribe, (sub) => {
      __privateGet(this, _listeners).add(sub);
      return () => __privateGet(this, _listeners).delete(sub);
    });
  }
  getServerSnapshot(keyPath, defaultValue) {
    return this.getSnapshot(keyPath, defaultValue);
  }
  get name() {
    return this.constructor.name;
  }
  toExternalStore(keyPath, defaultValue) {
    const subscribe = __privateGet(this, _subscribe);
    const getSnapshot = () => this.getSnapshot(keyPath, defaultValue);
    const getServerSnapshot = () => this.getServerSnapshot(keyPath, defaultValue);
    return {
      subscribe,
      getSnapshot,
      getServerSnapshot
    };
  }
  createAsyncRef() {
    return createAsyncRef(this.notify);
  }
};
_listeners = new WeakMap();
_subscribe = new WeakMap();

// src/backends/always-backend.ts
var _alwaysMapping;
var AlwaysBackend = class extends AbstractBackend {
  constructor(alwaysMapping = {}) {
    super();
    __privateAdd(this, _alwaysMapping, void 0);
    __privateSet(this, _alwaysMapping, alwaysMapping);
  }
  getSnapshot(keyPath, defaultValue) {
    var _a;
    const type = typeof defaultValue;
    if (type !== "boolean" && type !== "string" && type !== "number") {
      throw new Error(`AlwaysBackend: dafault value must be a boolean, string or number, but got ${type}`);
    }
    return (_a = __privateGet(this, _alwaysMapping)[type]) != null ? _a : defaultValue;
  }
};
_alwaysMapping = new WeakMap();

// src/backends/static-backend.ts
var _data;
var StaticBackend = class extends AbstractBackend {
  constructor(data) {
    super();
    __privateAdd(this, _data, void 0);
    __privateSet(this, _data, data);
  }
  getSnapshot(keyPath, defaultValue) {
    if (keyPath.length === 0) {
      return defaultValue;
    }
    let result = __privateGet(this, _data);
    for (const key of keyPath) {
      result = result[key];
      if (result === void 0) {
        return defaultValue;
      }
    }
    return result;
  }
};
_data = new WeakMap();

// src/backends/computed-backend.ts
var makeComputable = (data, getRoot) => {
  if (typeof data !== "object") {
    return data;
  }
  return new Proxy(data, {
    get: (target, key_) => {
      const key = key_;
      const next = target[key];
      if (typeof next === "function") {
        const root = getRoot();
        return makeComputable(next(root), getRoot);
      }
      return makeComputable(next, getRoot);
    }
  });
};
var ComputedBackend = class extends StaticBackend {
  constructor(data) {
    const computable = makeComputable(data, () => computable);
    super(computable);
  }
};

// src/backends/null-backend.ts
var NullBackend = class extends AbstractBackend {
  getSnapshot(keyPath, defaultValue) {
    return defaultValue;
  }
};
export {
  AbstractBackend,
  AlwaysBackend,
  ComputedBackend,
  NullBackend,
  StaticBackend,
  createFlags
};
//# sourceMappingURL=index.mjs.map